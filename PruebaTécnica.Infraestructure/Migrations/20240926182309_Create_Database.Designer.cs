// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PruebaTécnica.Infraestructure;

#nullable disable

namespace PruebaTécnica.Infraestructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240926182309_Create_Database")]
    partial class Create_Database
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PruebaTécnica.Domain.Clientes.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Contraseña")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("contraseña");

                    b.Property<bool>("Estado")
                        .HasMaxLength(200)
                        .HasColumnType("boolean")
                        .HasColumnName("estado");

                    b.Property<Guid>("IdCliente")
                        .HasColumnType("uuid")
                        .HasColumnName("id_cliente");

                    b.Property<Guid>("PersonaId")
                        .HasColumnType("uuid")
                        .HasColumnName("persona_id");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_clients");

                    b.HasIndex("PersonaId")
                        .IsUnique()
                        .HasDatabaseName("ix_clients_persona_id");

                    b.ToTable("clients", (string)null);
                });

            modelBuilder.Entity("PruebaTécnica.Domain.Cuenta.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<bool>("Estado")
                        .HasMaxLength(50)
                        .HasColumnType("boolean")
                        .HasColumnName("estado");

                    b.Property<Guid>("IdCliente")
                        .HasColumnType("uuid")
                        .HasColumnName("id_cliente");

                    b.Property<Guid>("IdCuenta")
                        .HasColumnType("uuid")
                        .HasColumnName("id_cuenta");

                    b.Property<int>("NumeroCuenta")
                        .HasMaxLength(50)
                        .HasColumnType("integer")
                        .HasColumnName("numero_cuenta");

                    b.Property<string>("TipoDeCuenta")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("tipo_de_cuenta");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_account");

                    b.HasIndex("IdCuenta")
                        .HasDatabaseName("ix_account_id_cuenta");

                    b.ToTable("account", (string)null);
                });

            modelBuilder.Entity("PruebaTécnica.Domain.Movimientos.Motion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("CuentaId")
                        .HasColumnType("uuid")
                        .HasColumnName("cuenta_id");

                    b.Property<DateTime>("FechaDeMovimiento")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("fecha_de_movimiento");

                    b.Property<Guid>("IdMovimiento")
                        .HasColumnType("uuid")
                        .HasColumnName("id_movimiento");

                    b.Property<string>("TipoDeMovimiento")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("tipo_de_movimiento");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("Id")
                        .HasName("pk_motions");

                    b.HasIndex("CuentaId")
                        .HasDatabaseName("ix_motions_cuenta_id");

                    b.ToTable("motions", (string)null);
                });

            modelBuilder.Entity("PruebaTécnica.Domain.Persons.Person", b =>
                {
                    b.Property<Guid>("IdPersona")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id_persona");

                    b.Property<string>("Dirección")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("dirección");

                    b.Property<int>("Edad")
                        .HasMaxLength(200)
                        .HasColumnType("integer")
                        .HasColumnName("edad");

                    b.Property<string>("Genero")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("genero");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Identificacion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("identificacion");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("name");

                    b.Property<int>("Teléfono")
                        .HasMaxLength(200)
                        .HasColumnType("integer")
                        .HasColumnName("teléfono");

                    b.Property<uint>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("xmin");

                    b.HasKey("IdPersona")
                        .HasName("pk_persons");

                    b.ToTable("persons", (string)null);
                });

            modelBuilder.Entity("PruebaTécnica.Domain.Clientes.Client", b =>
                {
                    b.HasOne("PruebaTécnica.Domain.Persons.Person", "Persona")
                        .WithOne("Cliente")
                        .HasForeignKey("PruebaTécnica.Domain.Clientes.Client", "PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Client_Persona");

                    b.Navigation("Persona");
                });

            modelBuilder.Entity("PruebaTécnica.Domain.Cuenta.Account", b =>
                {
                    b.HasOne("PruebaTécnica.Domain.Clientes.Client", "Cliente")
                        .WithMany("Accounts")
                        .HasForeignKey("IdCuenta")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_account_clients_id_cuenta");

                    b.OwnsOne("PruebaTécnica.Domain.Shared.Money", "Saldo", b1 =>
                        {
                            b1.Property<Guid>("AccountId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric")
                                .HasColumnName("saldo_amount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("saldo_currency");

                            b1.HasKey("AccountId");

                            b1.ToTable("account");

                            b1.WithOwner()
                                .HasForeignKey("AccountId")
                                .HasConstraintName("fk_account_account_id");
                        });

                    b.Navigation("Cliente");

                    b.Navigation("Saldo")
                        .IsRequired();
                });

            modelBuilder.Entity("PruebaTécnica.Domain.Movimientos.Motion", b =>
                {
                    b.HasOne("PruebaTécnica.Domain.Cuenta.Account", "Cuenta")
                        .WithMany("movimientos")
                        .HasForeignKey("CuentaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_motions_account_cuenta_id");

                    b.OwnsOne("PruebaTécnica.Domain.Shared.Money", "Saldo", b1 =>
                        {
                            b1.Property<Guid>("MotionId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric")
                                .HasColumnName("saldo_amount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("saldo_currency");

                            b1.HasKey("MotionId");

                            b1.ToTable("motions");

                            b1.WithOwner()
                                .HasForeignKey("MotionId")
                                .HasConstraintName("fk_motions_motions_id");
                        });

                    b.OwnsOne("PruebaTécnica.Domain.Shared.Money", "Valor", b1 =>
                        {
                            b1.Property<Guid>("MotionId")
                                .HasColumnType("uuid")
                                .HasColumnName("id");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric")
                                .HasColumnName("valor_amount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("valor_currency");

                            b1.HasKey("MotionId");

                            b1.ToTable("motions");

                            b1.WithOwner()
                                .HasForeignKey("MotionId")
                                .HasConstraintName("fk_motions_motions_id");
                        });

                    b.Navigation("Cuenta");

                    b.Navigation("Saldo")
                        .IsRequired();

                    b.Navigation("Valor")
                        .IsRequired();
                });

            modelBuilder.Entity("PruebaTécnica.Domain.Clientes.Client", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("PruebaTécnica.Domain.Cuenta.Account", b =>
                {
                    b.Navigation("movimientos");
                });

            modelBuilder.Entity("PruebaTécnica.Domain.Persons.Person", b =>
                {
                    b.Navigation("Cliente")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
